{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP5HAA6J+E/wd3z/0grkphe"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Uk_8K5AH1zyL"},"outputs":[],"source":["# Importing all nessacery packages\n","import numpy as np\n","import pandas as pd\n","from datetime import datetime, timedelta\n","import yfinance as yf"]},{"cell_type":"code","source":["# Getting the first date\n","# Convert the string date to a datetime object\n","date1 = []\n","\n","# Function to generate weekly dates\n","def fetching_dates():\n","    start_date = '8-2-2010'\n","    end_date = '7-29-2024'\n","\n","    date = datetime.strptime(start_date, '%m-%d-%Y')\n","    end_date = datetime.strptime(end_date, '%m-%d-%Y')\n","\n","    while date <= end_date:\n","        date1.append(date)\n","        date += timedelta(days=7)\n","\n","    return date1\n","\n","# Generate the list of dates\n","date_list = fetching_dates()\n","\n","# Create a DataFrame with the date1 column\n","df = pd.DataFrame(date_list, columns=['date1'])\n"],"metadata":{"id":"WEDACDM4DKZQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Fetching the market cap for date1\n","# Define the ticker symbol for the stock you're interested in\n","ticker = 'F'\n","\n","# Initialize an empty list to store the market caps\n","market_caps = []\n","\n","# Fetch market cap for each date in the date1 column\n","for date in df['date1']:\n","    try:\n","        stock = yf.Ticker(ticker)\n","        # Fetch historical data around the date\n","        hist_date = stock.history(start=date - timedelta(days=1), end=date + timedelta(days=1))\n","        if not hist_date.empty:\n","            # Get the market cap for the exact date\n","            market_cap = hist_date.iloc[0]['Close'] * stock.info['sharesOutstanding']\n","            market_caps.append(market_cap)\n","        else:\n","            market_caps.append(None)\n","    except Exception as e:\n","        print(f\"Error fetching data for {ticker} on {date}: {e}\")\n","        market_caps.append(None)\n","\n","# Add the market cap column to the DataFrame\n","df['Market_Cap'] = market_caps\n","\n","# Display the DataFrame with the market caps\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3P6o97I_mqkP","executionInfo":{"status":"ok","timestamp":1724195658524,"user_tz":-60,"elapsed":106337,"user":{"displayName":"Ameer Moutaouakil","userId":"06305495991749921211"}},"outputId":"5f06946d-f289-41be-f09e-e547f5414615"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2010-09-05 00:00:00 -> 2010-09-07 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2010-09-05 00:00:00 -> 2010-09-07 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2011-01-16 00:00:00 -> 2011-01-18 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2011-01-16 00:00:00 -> 2011-01-18 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2011-02-20 00:00:00 -> 2011-02-22 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2011-02-20 00:00:00 -> 2011-02-22 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2011-05-29 00:00:00 -> 2011-05-31 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2011-05-29 00:00:00 -> 2011-05-31 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2011-07-03 00:00:00 -> 2011-07-05 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2011-07-03 00:00:00 -> 2011-07-05 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2011-09-04 00:00:00 -> 2011-09-06 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2011-09-04 00:00:00 -> 2011-09-06 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2011-12-25 00:00:00 -> 2011-12-27 00:00:00)\n","ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2012-01-01 00:00:00 -> 2012-01-03 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2011-12-25 00:00:00 -> 2011-12-27 00:00:00)\n","$F: possibly delisted; No price data found  (1d 2012-01-01 00:00:00 -> 2012-01-03 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2012-01-15 00:00:00 -> 2012-01-17 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2012-01-15 00:00:00 -> 2012-01-17 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2012-02-19 00:00:00 -> 2012-02-21 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2012-02-19 00:00:00 -> 2012-02-21 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2012-05-27 00:00:00 -> 2012-05-29 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2012-05-27 00:00:00 -> 2012-05-29 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2012-09-02 00:00:00 -> 2012-09-04 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2012-09-02 00:00:00 -> 2012-09-04 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2012-10-28 00:00:00 -> 2012-10-30 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2012-10-28 00:00:00 -> 2012-10-30 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2013-01-20 00:00:00 -> 2013-01-22 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2013-01-20 00:00:00 -> 2013-01-22 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2013-02-17 00:00:00 -> 2013-02-19 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2013-02-17 00:00:00 -> 2013-02-19 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2013-05-26 00:00:00 -> 2013-05-28 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2013-05-26 00:00:00 -> 2013-05-28 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2013-09-01 00:00:00 -> 2013-09-03 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2013-09-01 00:00:00 -> 2013-09-03 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2014-01-19 00:00:00 -> 2014-01-21 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2014-01-19 00:00:00 -> 2014-01-21 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2014-02-16 00:00:00 -> 2014-02-18 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2014-02-16 00:00:00 -> 2014-02-18 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2014-05-25 00:00:00 -> 2014-05-27 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2014-05-25 00:00:00 -> 2014-05-27 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2014-08-31 00:00:00 -> 2014-09-02 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2014-08-31 00:00:00 -> 2014-09-02 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2015-01-18 00:00:00 -> 2015-01-20 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2015-01-18 00:00:00 -> 2015-01-20 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2015-02-15 00:00:00 -> 2015-02-17 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2015-02-15 00:00:00 -> 2015-02-17 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2015-05-24 00:00:00 -> 2015-05-26 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2015-05-24 00:00:00 -> 2015-05-26 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2015-09-06 00:00:00 -> 2015-09-08 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2015-09-06 00:00:00 -> 2015-09-08 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2016-01-17 00:00:00 -> 2016-01-19 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2016-01-17 00:00:00 -> 2016-01-19 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2016-02-14 00:00:00 -> 2016-02-16 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2016-02-14 00:00:00 -> 2016-02-16 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2016-05-29 00:00:00 -> 2016-05-31 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2016-05-29 00:00:00 -> 2016-05-31 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2016-07-03 00:00:00 -> 2016-07-05 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2016-07-03 00:00:00 -> 2016-07-05 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2016-09-04 00:00:00 -> 2016-09-06 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2016-09-04 00:00:00 -> 2016-09-06 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2016-12-25 00:00:00 -> 2016-12-27 00:00:00)\n","ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2017-01-01 00:00:00 -> 2017-01-03 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2016-12-25 00:00:00 -> 2016-12-27 00:00:00)\n","$F: possibly delisted; No price data found  (1d 2017-01-01 00:00:00 -> 2017-01-03 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2017-01-15 00:00:00 -> 2017-01-17 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2017-01-15 00:00:00 -> 2017-01-17 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2017-02-19 00:00:00 -> 2017-02-21 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2017-02-19 00:00:00 -> 2017-02-21 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2017-05-28 00:00:00 -> 2017-05-30 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2017-05-28 00:00:00 -> 2017-05-30 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2017-09-03 00:00:00 -> 2017-09-05 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2017-09-03 00:00:00 -> 2017-09-05 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2017-12-24 00:00:00 -> 2017-12-26 00:00:00)\n","ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2017-12-31 00:00:00 -> 2018-01-02 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2017-12-24 00:00:00 -> 2017-12-26 00:00:00)\n","$F: possibly delisted; No price data found  (1d 2017-12-31 00:00:00 -> 2018-01-02 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2018-01-14 00:00:00 -> 2018-01-16 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2018-01-14 00:00:00 -> 2018-01-16 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2018-02-18 00:00:00 -> 2018-02-20 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2018-02-18 00:00:00 -> 2018-02-20 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2018-05-27 00:00:00 -> 2018-05-29 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2018-05-27 00:00:00 -> 2018-05-29 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2018-09-02 00:00:00 -> 2018-09-04 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2018-09-02 00:00:00 -> 2018-09-04 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2019-01-20 00:00:00 -> 2019-01-22 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2019-01-20 00:00:00 -> 2019-01-22 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2019-02-17 00:00:00 -> 2019-02-19 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2019-02-17 00:00:00 -> 2019-02-19 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2019-05-26 00:00:00 -> 2019-05-28 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2019-05-26 00:00:00 -> 2019-05-28 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2019-09-01 00:00:00 -> 2019-09-03 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2019-09-01 00:00:00 -> 2019-09-03 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2020-01-19 00:00:00 -> 2020-01-21 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2020-01-19 00:00:00 -> 2020-01-21 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2020-02-16 00:00:00 -> 2020-02-18 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2020-02-16 00:00:00 -> 2020-02-18 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2020-05-24 00:00:00 -> 2020-05-26 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2020-05-24 00:00:00 -> 2020-05-26 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2020-09-06 00:00:00 -> 2020-09-08 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2020-09-06 00:00:00 -> 2020-09-08 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2021-01-17 00:00:00 -> 2021-01-19 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2021-01-17 00:00:00 -> 2021-01-19 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2021-02-14 00:00:00 -> 2021-02-16 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2021-02-14 00:00:00 -> 2021-02-16 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2021-05-30 00:00:00 -> 2021-06-01 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2021-05-30 00:00:00 -> 2021-06-01 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2021-07-04 00:00:00 -> 2021-07-06 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2021-07-04 00:00:00 -> 2021-07-06 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2021-09-05 00:00:00 -> 2021-09-07 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2021-09-05 00:00:00 -> 2021-09-07 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2022-01-16 00:00:00 -> 2022-01-18 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2022-01-16 00:00:00 -> 2022-01-18 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2022-02-20 00:00:00 -> 2022-02-22 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2022-02-20 00:00:00 -> 2022-02-22 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2022-05-29 00:00:00 -> 2022-05-31 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2022-05-29 00:00:00 -> 2022-05-31 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2022-06-19 00:00:00 -> 2022-06-21 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2022-06-19 00:00:00 -> 2022-06-21 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2022-07-03 00:00:00 -> 2022-07-05 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2022-07-03 00:00:00 -> 2022-07-05 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2022-09-04 00:00:00 -> 2022-09-06 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2022-09-04 00:00:00 -> 2022-09-06 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2022-12-25 00:00:00 -> 2022-12-27 00:00:00)\n","ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2023-01-01 00:00:00 -> 2023-01-03 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2022-12-25 00:00:00 -> 2022-12-27 00:00:00)\n","$F: possibly delisted; No price data found  (1d 2023-01-01 00:00:00 -> 2023-01-03 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2023-01-15 00:00:00 -> 2023-01-17 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2023-01-15 00:00:00 -> 2023-01-17 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2023-02-19 00:00:00 -> 2023-02-21 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2023-02-19 00:00:00 -> 2023-02-21 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2023-05-28 00:00:00 -> 2023-05-30 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2023-05-28 00:00:00 -> 2023-05-30 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2023-06-18 00:00:00 -> 2023-06-20 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2023-06-18 00:00:00 -> 2023-06-20 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2023-09-03 00:00:00 -> 2023-09-05 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2023-09-03 00:00:00 -> 2023-09-05 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2023-12-24 00:00:00 -> 2023-12-26 00:00:00)\n","ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2023-12-31 00:00:00 -> 2024-01-02 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2023-12-24 00:00:00 -> 2023-12-26 00:00:00)\n","$F: possibly delisted; No price data found  (1d 2023-12-31 00:00:00 -> 2024-01-02 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2024-01-14 00:00:00 -> 2024-01-16 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2024-01-14 00:00:00 -> 2024-01-16 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2024-02-18 00:00:00 -> 2024-02-20 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2024-02-18 00:00:00 -> 2024-02-20 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2024-05-26 00:00:00 -> 2024-05-28 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2024-05-26 00:00:00 -> 2024-05-28 00:00:00)\n","         date1    Market_Cap\n","0   2010-08-02  2.877159e+10\n","1   2010-08-09  2.853109e+10\n","2   2010-08-16  2.621363e+10\n","3   2010-08-23  2.538283e+10\n","4   2010-08-30  2.481440e+10\n","..         ...           ...\n","726 2024-07-01  4.905603e+10\n","727 2024-07-08  4.990182e+10\n","728 2024-07-15  5.470747e+10\n","729 2024-07-22  5.428457e+10\n","730 2024-07-29  4.232813e+10\n","\n","[731 rows x 2 columns]\n"]}]},{"cell_type":"code","source":["# Getting date2\n","df['date2'] = df['date1'] + pd.Timedelta(weeks=1)\n","\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"Ya8dJAKkna3p","executionInfo":{"status":"ok","timestamp":1724195658524,"user_tz":-60,"elapsed":19,"user":{"displayName":"Ameer Moutaouakil","userId":"06305495991749921211"}},"outputId":"5f908031-b928-444a-a88e-002307f444bb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         date1    Market_Cap      date2\n","0   2010-08-02  2.877159e+10 2010-08-09\n","1   2010-08-09  2.853109e+10 2010-08-16\n","2   2010-08-16  2.621363e+10 2010-08-23\n","3   2010-08-23  2.538283e+10 2010-08-30\n","4   2010-08-30  2.481440e+10 2010-09-06\n","..         ...           ...        ...\n","726 2024-07-01  4.905603e+10 2024-07-08\n","727 2024-07-08  4.990182e+10 2024-07-15\n","728 2024-07-15  5.470747e+10 2024-07-22\n","729 2024-07-22  5.428457e+10 2024-07-29\n","730 2024-07-29  4.232813e+10 2024-08-05\n","\n","[731 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-99bb28dc-1388-4d86-9a39-20bcf9ae1ab7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date1</th>\n","      <th>Market_Cap</th>\n","      <th>date2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2010-08-02</td>\n","      <td>2.877159e+10</td>\n","      <td>2010-08-09</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2010-08-09</td>\n","      <td>2.853109e+10</td>\n","      <td>2010-08-16</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2010-08-16</td>\n","      <td>2.621363e+10</td>\n","      <td>2010-08-23</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2010-08-23</td>\n","      <td>2.538283e+10</td>\n","      <td>2010-08-30</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2010-08-30</td>\n","      <td>2.481440e+10</td>\n","      <td>2010-09-06</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>726</th>\n","      <td>2024-07-01</td>\n","      <td>4.905603e+10</td>\n","      <td>2024-07-08</td>\n","    </tr>\n","    <tr>\n","      <th>727</th>\n","      <td>2024-07-08</td>\n","      <td>4.990182e+10</td>\n","      <td>2024-07-15</td>\n","    </tr>\n","    <tr>\n","      <th>728</th>\n","      <td>2024-07-15</td>\n","      <td>5.470747e+10</td>\n","      <td>2024-07-22</td>\n","    </tr>\n","    <tr>\n","      <th>729</th>\n","      <td>2024-07-22</td>\n","      <td>5.428457e+10</td>\n","      <td>2024-07-29</td>\n","    </tr>\n","    <tr>\n","      <th>730</th>\n","      <td>2024-07-29</td>\n","      <td>4.232813e+10</td>\n","      <td>2024-08-05</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>731 rows × 3 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-99bb28dc-1388-4d86-9a39-20bcf9ae1ab7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-99bb28dc-1388-4d86-9a39-20bcf9ae1ab7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-99bb28dc-1388-4d86-9a39-20bcf9ae1ab7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-51844599-a626-4e3d-b607-468c96871476\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-51844599-a626-4e3d-b607-468c96871476')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-51844599-a626-4e3d-b607-468c96871476 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_13c10807-2a5a-42b8-bbf6-18161db8940b\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_13c10807-2a5a-42b8-bbf6-18161db8940b button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 731,\n  \"fields\": [\n    {\n      \"column\": \"date1\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-08-02 00:00:00\",\n        \"max\": \"2024-07-29 00:00:00\",\n        \"num_unique_values\": 731,\n        \"samples\": [\n          \"2024-01-22 00:00:00\",\n          \"2011-03-21 00:00:00\",\n          \"2016-05-02 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market_Cap\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9207095991.278816,\n        \"min\": 12933116989.432251,\n        \"max\": 77308708155.85547,\n        \"num_unique_values\": 649,\n        \"samples\": [\n          48429372832.86182,\n          37908572803.16748,\n          41934076630.85303\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date2\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-08-09 00:00:00\",\n        \"max\": \"2024-08-05 00:00:00\",\n        \"num_unique_values\": 731,\n        \"samples\": [\n          \"2024-01-29 00:00:00\",\n          \"2011-03-28 00:00:00\",\n          \"2016-05-09 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":162}]},{"cell_type":"code","source":["# Getting the market cap for the relevant stock for date2\n","\n","market_caps_date2 = []\n","\n","for date in df['date2']:\n","    try:\n","        stock = yf.Ticker(ticker)\n","        hist_date = stock.history(start=date - timedelta(days=1), end=date + timedelta(days=1))\n","        if not hist_date.empty:\n","            market_cap = hist_date.iloc[0]['Close'] * stock.info['sharesOutstanding']\n","            market_caps_date2.append(market_cap)\n","        else:\n","            market_caps_date2.append(None)\n","    except Exception as e:\n","        print(f\"Error fetching data for {ticker} on {date}: {e}\")\n","        market_caps_date2.append(None)\n","\n","df['Market_Cap_Date2'] = market_caps_date2\n","\n","# Display the DataFrame with the market caps\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PVxjqYmIGCee","executionInfo":{"status":"ok","timestamp":1724195765702,"user_tz":-60,"elapsed":107180,"user":{"displayName":"Ameer Moutaouakil","userId":"06305495991749921211"}},"outputId":"58d0ed69-5bb2-4244-e6ae-d5e0f34c272e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2010-09-05 00:00:00 -> 2010-09-07 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2010-09-05 00:00:00 -> 2010-09-07 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2011-01-16 00:00:00 -> 2011-01-18 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2011-01-16 00:00:00 -> 2011-01-18 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2011-02-20 00:00:00 -> 2011-02-22 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2011-02-20 00:00:00 -> 2011-02-22 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2011-05-29 00:00:00 -> 2011-05-31 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2011-05-29 00:00:00 -> 2011-05-31 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2011-07-03 00:00:00 -> 2011-07-05 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2011-07-03 00:00:00 -> 2011-07-05 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2011-09-04 00:00:00 -> 2011-09-06 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2011-09-04 00:00:00 -> 2011-09-06 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2011-12-25 00:00:00 -> 2011-12-27 00:00:00)\n","ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2012-01-01 00:00:00 -> 2012-01-03 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2011-12-25 00:00:00 -> 2011-12-27 00:00:00)\n","$F: possibly delisted; No price data found  (1d 2012-01-01 00:00:00 -> 2012-01-03 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2012-01-15 00:00:00 -> 2012-01-17 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2012-01-15 00:00:00 -> 2012-01-17 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2012-02-19 00:00:00 -> 2012-02-21 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2012-02-19 00:00:00 -> 2012-02-21 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2012-05-27 00:00:00 -> 2012-05-29 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2012-05-27 00:00:00 -> 2012-05-29 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2012-09-02 00:00:00 -> 2012-09-04 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2012-09-02 00:00:00 -> 2012-09-04 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2012-10-28 00:00:00 -> 2012-10-30 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2012-10-28 00:00:00 -> 2012-10-30 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2013-01-20 00:00:00 -> 2013-01-22 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2013-01-20 00:00:00 -> 2013-01-22 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2013-02-17 00:00:00 -> 2013-02-19 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2013-02-17 00:00:00 -> 2013-02-19 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2013-05-26 00:00:00 -> 2013-05-28 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2013-05-26 00:00:00 -> 2013-05-28 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2013-09-01 00:00:00 -> 2013-09-03 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2013-09-01 00:00:00 -> 2013-09-03 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2014-01-19 00:00:00 -> 2014-01-21 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2014-01-19 00:00:00 -> 2014-01-21 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2014-02-16 00:00:00 -> 2014-02-18 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2014-02-16 00:00:00 -> 2014-02-18 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2014-05-25 00:00:00 -> 2014-05-27 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2014-05-25 00:00:00 -> 2014-05-27 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2014-08-31 00:00:00 -> 2014-09-02 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2014-08-31 00:00:00 -> 2014-09-02 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2015-01-18 00:00:00 -> 2015-01-20 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2015-01-18 00:00:00 -> 2015-01-20 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2015-02-15 00:00:00 -> 2015-02-17 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2015-02-15 00:00:00 -> 2015-02-17 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2015-05-24 00:00:00 -> 2015-05-26 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2015-05-24 00:00:00 -> 2015-05-26 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2015-09-06 00:00:00 -> 2015-09-08 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2015-09-06 00:00:00 -> 2015-09-08 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2016-01-17 00:00:00 -> 2016-01-19 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2016-01-17 00:00:00 -> 2016-01-19 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2016-02-14 00:00:00 -> 2016-02-16 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2016-02-14 00:00:00 -> 2016-02-16 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2016-05-29 00:00:00 -> 2016-05-31 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2016-05-29 00:00:00 -> 2016-05-31 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2016-07-03 00:00:00 -> 2016-07-05 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2016-07-03 00:00:00 -> 2016-07-05 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2016-09-04 00:00:00 -> 2016-09-06 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2016-09-04 00:00:00 -> 2016-09-06 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2016-12-25 00:00:00 -> 2016-12-27 00:00:00)\n","ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2017-01-01 00:00:00 -> 2017-01-03 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2016-12-25 00:00:00 -> 2016-12-27 00:00:00)\n","$F: possibly delisted; No price data found  (1d 2017-01-01 00:00:00 -> 2017-01-03 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2017-01-15 00:00:00 -> 2017-01-17 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2017-01-15 00:00:00 -> 2017-01-17 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2017-02-19 00:00:00 -> 2017-02-21 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2017-02-19 00:00:00 -> 2017-02-21 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2017-05-28 00:00:00 -> 2017-05-30 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2017-05-28 00:00:00 -> 2017-05-30 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2017-09-03 00:00:00 -> 2017-09-05 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2017-09-03 00:00:00 -> 2017-09-05 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2017-12-24 00:00:00 -> 2017-12-26 00:00:00)\n","ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2017-12-31 00:00:00 -> 2018-01-02 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2017-12-24 00:00:00 -> 2017-12-26 00:00:00)\n","$F: possibly delisted; No price data found  (1d 2017-12-31 00:00:00 -> 2018-01-02 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2018-01-14 00:00:00 -> 2018-01-16 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2018-01-14 00:00:00 -> 2018-01-16 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2018-02-18 00:00:00 -> 2018-02-20 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2018-02-18 00:00:00 -> 2018-02-20 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2018-05-27 00:00:00 -> 2018-05-29 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2018-05-27 00:00:00 -> 2018-05-29 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2018-09-02 00:00:00 -> 2018-09-04 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2018-09-02 00:00:00 -> 2018-09-04 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2019-01-20 00:00:00 -> 2019-01-22 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2019-01-20 00:00:00 -> 2019-01-22 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2019-02-17 00:00:00 -> 2019-02-19 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2019-02-17 00:00:00 -> 2019-02-19 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2019-05-26 00:00:00 -> 2019-05-28 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2019-05-26 00:00:00 -> 2019-05-28 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2019-09-01 00:00:00 -> 2019-09-03 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2019-09-01 00:00:00 -> 2019-09-03 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2020-01-19 00:00:00 -> 2020-01-21 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2020-01-19 00:00:00 -> 2020-01-21 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2020-02-16 00:00:00 -> 2020-02-18 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2020-02-16 00:00:00 -> 2020-02-18 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2020-05-24 00:00:00 -> 2020-05-26 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2020-05-24 00:00:00 -> 2020-05-26 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2020-09-06 00:00:00 -> 2020-09-08 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2020-09-06 00:00:00 -> 2020-09-08 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2021-01-17 00:00:00 -> 2021-01-19 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2021-01-17 00:00:00 -> 2021-01-19 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2021-02-14 00:00:00 -> 2021-02-16 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2021-02-14 00:00:00 -> 2021-02-16 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2021-05-30 00:00:00 -> 2021-06-01 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2021-05-30 00:00:00 -> 2021-06-01 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2021-07-04 00:00:00 -> 2021-07-06 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2021-07-04 00:00:00 -> 2021-07-06 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2021-09-05 00:00:00 -> 2021-09-07 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2021-09-05 00:00:00 -> 2021-09-07 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2022-01-16 00:00:00 -> 2022-01-18 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2022-01-16 00:00:00 -> 2022-01-18 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2022-02-20 00:00:00 -> 2022-02-22 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2022-02-20 00:00:00 -> 2022-02-22 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2022-05-29 00:00:00 -> 2022-05-31 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2022-05-29 00:00:00 -> 2022-05-31 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2022-06-19 00:00:00 -> 2022-06-21 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2022-06-19 00:00:00 -> 2022-06-21 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2022-07-03 00:00:00 -> 2022-07-05 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2022-07-03 00:00:00 -> 2022-07-05 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2022-09-04 00:00:00 -> 2022-09-06 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2022-09-04 00:00:00 -> 2022-09-06 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2022-12-25 00:00:00 -> 2022-12-27 00:00:00)\n","ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2023-01-01 00:00:00 -> 2023-01-03 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2022-12-25 00:00:00 -> 2022-12-27 00:00:00)\n","$F: possibly delisted; No price data found  (1d 2023-01-01 00:00:00 -> 2023-01-03 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2023-01-15 00:00:00 -> 2023-01-17 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2023-01-15 00:00:00 -> 2023-01-17 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2023-02-19 00:00:00 -> 2023-02-21 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2023-02-19 00:00:00 -> 2023-02-21 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2023-05-28 00:00:00 -> 2023-05-30 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2023-05-28 00:00:00 -> 2023-05-30 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2023-06-18 00:00:00 -> 2023-06-20 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2023-06-18 00:00:00 -> 2023-06-20 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2023-09-03 00:00:00 -> 2023-09-05 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2023-09-03 00:00:00 -> 2023-09-05 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2023-12-24 00:00:00 -> 2023-12-26 00:00:00)\n","ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2023-12-31 00:00:00 -> 2024-01-02 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2023-12-24 00:00:00 -> 2023-12-26 00:00:00)\n","$F: possibly delisted; No price data found  (1d 2023-12-31 00:00:00 -> 2024-01-02 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2024-01-14 00:00:00 -> 2024-01-16 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2024-01-14 00:00:00 -> 2024-01-16 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2024-02-18 00:00:00 -> 2024-02-20 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2024-02-18 00:00:00 -> 2024-02-20 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2024-05-26 00:00:00 -> 2024-05-28 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2024-05-26 00:00:00 -> 2024-05-28 00:00:00)\n","         date1    Market_Cap      date2  Market_Cap_Date2\n","0   2010-08-02  2.877159e+10 2010-08-09      2.853109e+10\n","1   2010-08-09  2.853109e+10 2010-08-16      2.621362e+10\n","2   2010-08-16  2.621363e+10 2010-08-23      2.538283e+10\n","3   2010-08-23  2.538283e+10 2010-08-30      2.481440e+10\n","4   2010-08-30  2.481440e+10 2010-09-06               NaN\n","..         ...           ...        ...               ...\n","726 2024-07-01  4.905603e+10 2024-07-08      4.990182e+10\n","727 2024-07-08  4.990182e+10 2024-07-15      5.470747e+10\n","728 2024-07-15  5.470747e+10 2024-07-22      5.428457e+10\n","729 2024-07-22  5.428457e+10 2024-07-29      4.232813e+10\n","730 2024-07-29  4.232813e+10 2024-08-05      3.733026e+10\n","\n","[731 rows x 4 columns]\n"]}]},{"cell_type":"code","source":["# Getting date3\n","df['date3'] = df['date2'] + pd.Timedelta(weeks=1)\n","\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"CzB8WW5aoSTa","executionInfo":{"status":"ok","timestamp":1724195765702,"user_tz":-60,"elapsed":14,"user":{"displayName":"Ameer Moutaouakil","userId":"06305495991749921211"}},"outputId":"5fc7fddc-4e78-4760-bc4e-4b11e44e73d2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         date1    Market_Cap      date2  Market_Cap_Date2      date3\n","0   2010-08-02  2.877159e+10 2010-08-09      2.853109e+10 2010-08-16\n","1   2010-08-09  2.853109e+10 2010-08-16      2.621362e+10 2010-08-23\n","2   2010-08-16  2.621363e+10 2010-08-23      2.538283e+10 2010-08-30\n","3   2010-08-23  2.538283e+10 2010-08-30      2.481440e+10 2010-09-06\n","4   2010-08-30  2.481440e+10 2010-09-06               NaN 2010-09-13\n","..         ...           ...        ...               ...        ...\n","726 2024-07-01  4.905603e+10 2024-07-08      4.990182e+10 2024-07-15\n","727 2024-07-08  4.990182e+10 2024-07-15      5.470747e+10 2024-07-22\n","728 2024-07-15  5.470747e+10 2024-07-22      5.428457e+10 2024-07-29\n","729 2024-07-22  5.428457e+10 2024-07-29      4.232813e+10 2024-08-05\n","730 2024-07-29  4.232813e+10 2024-08-05      3.733026e+10 2024-08-12\n","\n","[731 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-07d7de66-00e7-4607-a10d-d254fd1009c2\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date1</th>\n","      <th>Market_Cap</th>\n","      <th>date2</th>\n","      <th>Market_Cap_Date2</th>\n","      <th>date3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2010-08-02</td>\n","      <td>2.877159e+10</td>\n","      <td>2010-08-09</td>\n","      <td>2.853109e+10</td>\n","      <td>2010-08-16</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2010-08-09</td>\n","      <td>2.853109e+10</td>\n","      <td>2010-08-16</td>\n","      <td>2.621362e+10</td>\n","      <td>2010-08-23</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2010-08-16</td>\n","      <td>2.621363e+10</td>\n","      <td>2010-08-23</td>\n","      <td>2.538283e+10</td>\n","      <td>2010-08-30</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2010-08-23</td>\n","      <td>2.538283e+10</td>\n","      <td>2010-08-30</td>\n","      <td>2.481440e+10</td>\n","      <td>2010-09-06</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2010-08-30</td>\n","      <td>2.481440e+10</td>\n","      <td>2010-09-06</td>\n","      <td>NaN</td>\n","      <td>2010-09-13</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>726</th>\n","      <td>2024-07-01</td>\n","      <td>4.905603e+10</td>\n","      <td>2024-07-08</td>\n","      <td>4.990182e+10</td>\n","      <td>2024-07-15</td>\n","    </tr>\n","    <tr>\n","      <th>727</th>\n","      <td>2024-07-08</td>\n","      <td>4.990182e+10</td>\n","      <td>2024-07-15</td>\n","      <td>5.470747e+10</td>\n","      <td>2024-07-22</td>\n","    </tr>\n","    <tr>\n","      <th>728</th>\n","      <td>2024-07-15</td>\n","      <td>5.470747e+10</td>\n","      <td>2024-07-22</td>\n","      <td>5.428457e+10</td>\n","      <td>2024-07-29</td>\n","    </tr>\n","    <tr>\n","      <th>729</th>\n","      <td>2024-07-22</td>\n","      <td>5.428457e+10</td>\n","      <td>2024-07-29</td>\n","      <td>4.232813e+10</td>\n","      <td>2024-08-05</td>\n","    </tr>\n","    <tr>\n","      <th>730</th>\n","      <td>2024-07-29</td>\n","      <td>4.232813e+10</td>\n","      <td>2024-08-05</td>\n","      <td>3.733026e+10</td>\n","      <td>2024-08-12</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>731 rows × 5 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-07d7de66-00e7-4607-a10d-d254fd1009c2')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-07d7de66-00e7-4607-a10d-d254fd1009c2 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-07d7de66-00e7-4607-a10d-d254fd1009c2');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1d4c634c-2647-4731-8b38-7a82bfda56ed\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1d4c634c-2647-4731-8b38-7a82bfda56ed')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1d4c634c-2647-4731-8b38-7a82bfda56ed button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_1845d2e9-474d-4b85-83ec-ee0438aaff82\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_1845d2e9-474d-4b85-83ec-ee0438aaff82 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 731,\n  \"fields\": [\n    {\n      \"column\": \"date1\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-08-02 00:00:00\",\n        \"max\": \"2024-07-29 00:00:00\",\n        \"num_unique_values\": 731,\n        \"samples\": [\n          \"2024-01-22 00:00:00\",\n          \"2011-03-21 00:00:00\",\n          \"2016-05-02 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market_Cap\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9207095991.278816,\n        \"min\": 12933116989.432251,\n        \"max\": 77308708155.85547,\n        \"num_unique_values\": 649,\n        \"samples\": [\n          48429372832.86182,\n          37908572803.16748,\n          41934076630.85303\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date2\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-08-09 00:00:00\",\n        \"max\": \"2024-08-05 00:00:00\",\n        \"num_unique_values\": 731,\n        \"samples\": [\n          \"2024-01-29 00:00:00\",\n          \"2011-03-28 00:00:00\",\n          \"2016-05-09 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market_Cap_Date2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9204864599.137924,\n        \"min\": 12933116058.550781,\n        \"max\": 77308723049.95898,\n        \"num_unique_values\": 653,\n        \"samples\": [\n          25545009124.81714,\n          33702511482.08789,\n          32328705438.487793\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date3\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-08-16 00:00:00\",\n        \"max\": \"2024-08-12 00:00:00\",\n        \"num_unique_values\": 731,\n        \"samples\": [\n          \"2024-02-05 00:00:00\",\n          \"2011-04-04 00:00:00\",\n          \"2016-05-16 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":164}]},{"cell_type":"code","source":["# Getting the market cap for the relevant stock for date3\n","\n","market_caps_date3 = []\n","\n","for date in df['date3']:\n","    try:\n","        stock = yf.Ticker(ticker)\n","        hist_date = stock.history(start=date - timedelta(days=1), end=date + timedelta(days=1))\n","        if not hist_date.empty:\n","            market_cap = hist_date.iloc[0]['Close'] * stock.info['sharesOutstanding']\n","            market_caps_date3.append(market_cap)\n","        else:\n","            market_caps_date3.append(None)\n","    except Exception as e:\n","        print(f\"Error fetching data for {ticker} on {date}: {e}\")\n","        market_caps_date3.append(None)\n","\n","df['Market_Cap_Date3'] = market_caps_date3\n","\n","# Display the DataFrame with the market caps\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"YgLgmmGJGCRv","executionInfo":{"status":"ok","timestamp":1724195877506,"user_tz":-60,"elapsed":111806,"user":{"displayName":"Ameer Moutaouakil","userId":"06305495991749921211"}},"outputId":"d32b4ec4-9b83-4eaf-c861-85357d190cee"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2010-09-05 00:00:00 -> 2010-09-07 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2010-09-05 00:00:00 -> 2010-09-07 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2011-01-16 00:00:00 -> 2011-01-18 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2011-01-16 00:00:00 -> 2011-01-18 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2011-02-20 00:00:00 -> 2011-02-22 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2011-02-20 00:00:00 -> 2011-02-22 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2011-05-29 00:00:00 -> 2011-05-31 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2011-05-29 00:00:00 -> 2011-05-31 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2011-07-03 00:00:00 -> 2011-07-05 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2011-07-03 00:00:00 -> 2011-07-05 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2011-09-04 00:00:00 -> 2011-09-06 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2011-09-04 00:00:00 -> 2011-09-06 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2011-12-25 00:00:00 -> 2011-12-27 00:00:00)\n","ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2012-01-01 00:00:00 -> 2012-01-03 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2011-12-25 00:00:00 -> 2011-12-27 00:00:00)\n","$F: possibly delisted; No price data found  (1d 2012-01-01 00:00:00 -> 2012-01-03 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2012-01-15 00:00:00 -> 2012-01-17 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2012-01-15 00:00:00 -> 2012-01-17 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2012-02-19 00:00:00 -> 2012-02-21 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2012-02-19 00:00:00 -> 2012-02-21 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2012-05-27 00:00:00 -> 2012-05-29 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2012-05-27 00:00:00 -> 2012-05-29 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2012-09-02 00:00:00 -> 2012-09-04 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2012-09-02 00:00:00 -> 2012-09-04 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2012-10-28 00:00:00 -> 2012-10-30 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2012-10-28 00:00:00 -> 2012-10-30 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2013-01-20 00:00:00 -> 2013-01-22 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2013-01-20 00:00:00 -> 2013-01-22 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2013-02-17 00:00:00 -> 2013-02-19 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2013-02-17 00:00:00 -> 2013-02-19 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2013-05-26 00:00:00 -> 2013-05-28 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2013-05-26 00:00:00 -> 2013-05-28 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2013-09-01 00:00:00 -> 2013-09-03 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2013-09-01 00:00:00 -> 2013-09-03 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2014-01-19 00:00:00 -> 2014-01-21 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2014-01-19 00:00:00 -> 2014-01-21 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2014-02-16 00:00:00 -> 2014-02-18 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2014-02-16 00:00:00 -> 2014-02-18 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2014-05-25 00:00:00 -> 2014-05-27 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2014-05-25 00:00:00 -> 2014-05-27 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2014-08-31 00:00:00 -> 2014-09-02 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2014-08-31 00:00:00 -> 2014-09-02 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2015-01-18 00:00:00 -> 2015-01-20 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2015-01-18 00:00:00 -> 2015-01-20 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2015-02-15 00:00:00 -> 2015-02-17 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2015-02-15 00:00:00 -> 2015-02-17 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2015-05-24 00:00:00 -> 2015-05-26 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2015-05-24 00:00:00 -> 2015-05-26 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2015-09-06 00:00:00 -> 2015-09-08 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2015-09-06 00:00:00 -> 2015-09-08 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2016-01-17 00:00:00 -> 2016-01-19 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2016-01-17 00:00:00 -> 2016-01-19 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2016-02-14 00:00:00 -> 2016-02-16 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2016-02-14 00:00:00 -> 2016-02-16 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2016-05-29 00:00:00 -> 2016-05-31 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2016-05-29 00:00:00 -> 2016-05-31 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2016-07-03 00:00:00 -> 2016-07-05 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2016-07-03 00:00:00 -> 2016-07-05 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2016-09-04 00:00:00 -> 2016-09-06 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2016-09-04 00:00:00 -> 2016-09-06 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2016-12-25 00:00:00 -> 2016-12-27 00:00:00)\n","ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2017-01-01 00:00:00 -> 2017-01-03 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2016-12-25 00:00:00 -> 2016-12-27 00:00:00)\n","$F: possibly delisted; No price data found  (1d 2017-01-01 00:00:00 -> 2017-01-03 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2017-01-15 00:00:00 -> 2017-01-17 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2017-01-15 00:00:00 -> 2017-01-17 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2017-02-19 00:00:00 -> 2017-02-21 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2017-02-19 00:00:00 -> 2017-02-21 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2017-05-28 00:00:00 -> 2017-05-30 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2017-05-28 00:00:00 -> 2017-05-30 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2017-09-03 00:00:00 -> 2017-09-05 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2017-09-03 00:00:00 -> 2017-09-05 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2017-12-24 00:00:00 -> 2017-12-26 00:00:00)\n","ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2017-12-31 00:00:00 -> 2018-01-02 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2017-12-24 00:00:00 -> 2017-12-26 00:00:00)\n","$F: possibly delisted; No price data found  (1d 2017-12-31 00:00:00 -> 2018-01-02 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2018-01-14 00:00:00 -> 2018-01-16 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2018-01-14 00:00:00 -> 2018-01-16 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2018-02-18 00:00:00 -> 2018-02-20 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2018-02-18 00:00:00 -> 2018-02-20 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2018-05-27 00:00:00 -> 2018-05-29 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2018-05-27 00:00:00 -> 2018-05-29 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2018-09-02 00:00:00 -> 2018-09-04 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2018-09-02 00:00:00 -> 2018-09-04 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2019-01-20 00:00:00 -> 2019-01-22 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2019-01-20 00:00:00 -> 2019-01-22 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2019-02-17 00:00:00 -> 2019-02-19 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2019-02-17 00:00:00 -> 2019-02-19 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2019-05-26 00:00:00 -> 2019-05-28 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2019-05-26 00:00:00 -> 2019-05-28 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2019-09-01 00:00:00 -> 2019-09-03 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2019-09-01 00:00:00 -> 2019-09-03 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2020-01-19 00:00:00 -> 2020-01-21 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2020-01-19 00:00:00 -> 2020-01-21 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2020-02-16 00:00:00 -> 2020-02-18 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2020-02-16 00:00:00 -> 2020-02-18 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2020-05-24 00:00:00 -> 2020-05-26 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2020-05-24 00:00:00 -> 2020-05-26 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2020-09-06 00:00:00 -> 2020-09-08 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2020-09-06 00:00:00 -> 2020-09-08 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2021-01-17 00:00:00 -> 2021-01-19 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2021-01-17 00:00:00 -> 2021-01-19 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2021-02-14 00:00:00 -> 2021-02-16 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2021-02-14 00:00:00 -> 2021-02-16 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2021-05-30 00:00:00 -> 2021-06-01 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2021-05-30 00:00:00 -> 2021-06-01 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2021-07-04 00:00:00 -> 2021-07-06 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2021-07-04 00:00:00 -> 2021-07-06 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2021-09-05 00:00:00 -> 2021-09-07 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2021-09-05 00:00:00 -> 2021-09-07 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2022-01-16 00:00:00 -> 2022-01-18 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2022-01-16 00:00:00 -> 2022-01-18 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2022-02-20 00:00:00 -> 2022-02-22 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2022-02-20 00:00:00 -> 2022-02-22 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2022-05-29 00:00:00 -> 2022-05-31 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2022-05-29 00:00:00 -> 2022-05-31 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2022-06-19 00:00:00 -> 2022-06-21 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2022-06-19 00:00:00 -> 2022-06-21 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2022-07-03 00:00:00 -> 2022-07-05 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2022-07-03 00:00:00 -> 2022-07-05 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2022-09-04 00:00:00 -> 2022-09-06 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2022-09-04 00:00:00 -> 2022-09-06 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2022-12-25 00:00:00 -> 2022-12-27 00:00:00)\n","ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2023-01-01 00:00:00 -> 2023-01-03 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2022-12-25 00:00:00 -> 2022-12-27 00:00:00)\n","$F: possibly delisted; No price data found  (1d 2023-01-01 00:00:00 -> 2023-01-03 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2023-01-15 00:00:00 -> 2023-01-17 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2023-01-15 00:00:00 -> 2023-01-17 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2023-02-19 00:00:00 -> 2023-02-21 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2023-02-19 00:00:00 -> 2023-02-21 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2023-05-28 00:00:00 -> 2023-05-30 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2023-05-28 00:00:00 -> 2023-05-30 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2023-06-18 00:00:00 -> 2023-06-20 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2023-06-18 00:00:00 -> 2023-06-20 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2023-09-03 00:00:00 -> 2023-09-05 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2023-09-03 00:00:00 -> 2023-09-05 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2023-12-24 00:00:00 -> 2023-12-26 00:00:00)\n","ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2023-12-31 00:00:00 -> 2024-01-02 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2023-12-24 00:00:00 -> 2023-12-26 00:00:00)\n","$F: possibly delisted; No price data found  (1d 2023-12-31 00:00:00 -> 2024-01-02 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2024-01-14 00:00:00 -> 2024-01-16 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2024-01-14 00:00:00 -> 2024-01-16 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2024-02-18 00:00:00 -> 2024-02-20 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2024-02-18 00:00:00 -> 2024-02-20 00:00:00)\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:yfinance:$F: possibly delisted; No price data found  (1d 2024-05-26 00:00:00 -> 2024-05-28 00:00:00)\n"]},{"output_type":"stream","name":"stdout","text":["$F: possibly delisted; No price data found  (1d 2024-05-26 00:00:00 -> 2024-05-28 00:00:00)\n"]},{"output_type":"execute_result","data":{"text/plain":["         date1    Market_Cap      date2  Market_Cap_Date2      date3  \\\n","0   2010-08-02  2.877159e+10 2010-08-09      2.853109e+10 2010-08-16   \n","1   2010-08-09  2.853109e+10 2010-08-16      2.621362e+10 2010-08-23   \n","2   2010-08-16  2.621363e+10 2010-08-23      2.538283e+10 2010-08-30   \n","3   2010-08-23  2.538283e+10 2010-08-30      2.481440e+10 2010-09-06   \n","4   2010-08-30  2.481440e+10 2010-09-06               NaN 2010-09-13   \n","..         ...           ...        ...               ...        ...   \n","726 2024-07-01  4.905603e+10 2024-07-08      4.990182e+10 2024-07-15   \n","727 2024-07-08  4.990182e+10 2024-07-15      5.470747e+10 2024-07-22   \n","728 2024-07-15  5.470747e+10 2024-07-22      5.428457e+10 2024-07-29   \n","729 2024-07-22  5.428457e+10 2024-07-29      4.232813e+10 2024-08-05   \n","730 2024-07-29  4.232813e+10 2024-08-05      3.733026e+10 2024-08-12   \n","\n","     Market_Cap_Date3  \n","0        2.621362e+10  \n","1        2.538283e+10  \n","2        2.481440e+10  \n","3                 NaN  \n","4        2.621362e+10  \n","..                ...  \n","726      5.555961e+10  \n","727      5.513013e+10  \n","728      4.298744e+10  \n","729      3.791172e+10  \n","730      3.849738e+10  \n","\n","[731 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-40512483-76b7-4cdc-903e-b8b8b3a44808\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date1</th>\n","      <th>Market_Cap</th>\n","      <th>date2</th>\n","      <th>Market_Cap_Date2</th>\n","      <th>date3</th>\n","      <th>Market_Cap_Date3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2010-08-02</td>\n","      <td>2.877159e+10</td>\n","      <td>2010-08-09</td>\n","      <td>2.853109e+10</td>\n","      <td>2010-08-16</td>\n","      <td>2.621362e+10</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2010-08-09</td>\n","      <td>2.853109e+10</td>\n","      <td>2010-08-16</td>\n","      <td>2.621362e+10</td>\n","      <td>2010-08-23</td>\n","      <td>2.538283e+10</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2010-08-16</td>\n","      <td>2.621363e+10</td>\n","      <td>2010-08-23</td>\n","      <td>2.538283e+10</td>\n","      <td>2010-08-30</td>\n","      <td>2.481440e+10</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2010-08-23</td>\n","      <td>2.538283e+10</td>\n","      <td>2010-08-30</td>\n","      <td>2.481440e+10</td>\n","      <td>2010-09-06</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2010-08-30</td>\n","      <td>2.481440e+10</td>\n","      <td>2010-09-06</td>\n","      <td>NaN</td>\n","      <td>2010-09-13</td>\n","      <td>2.621362e+10</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>726</th>\n","      <td>2024-07-01</td>\n","      <td>4.905603e+10</td>\n","      <td>2024-07-08</td>\n","      <td>4.990182e+10</td>\n","      <td>2024-07-15</td>\n","      <td>5.555961e+10</td>\n","    </tr>\n","    <tr>\n","      <th>727</th>\n","      <td>2024-07-08</td>\n","      <td>4.990182e+10</td>\n","      <td>2024-07-15</td>\n","      <td>5.470747e+10</td>\n","      <td>2024-07-22</td>\n","      <td>5.513013e+10</td>\n","    </tr>\n","    <tr>\n","      <th>728</th>\n","      <td>2024-07-15</td>\n","      <td>5.470747e+10</td>\n","      <td>2024-07-22</td>\n","      <td>5.428457e+10</td>\n","      <td>2024-07-29</td>\n","      <td>4.298744e+10</td>\n","    </tr>\n","    <tr>\n","      <th>729</th>\n","      <td>2024-07-22</td>\n","      <td>5.428457e+10</td>\n","      <td>2024-07-29</td>\n","      <td>4.232813e+10</td>\n","      <td>2024-08-05</td>\n","      <td>3.791172e+10</td>\n","    </tr>\n","    <tr>\n","      <th>730</th>\n","      <td>2024-07-29</td>\n","      <td>4.232813e+10</td>\n","      <td>2024-08-05</td>\n","      <td>3.733026e+10</td>\n","      <td>2024-08-12</td>\n","      <td>3.849738e+10</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>731 rows × 6 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-40512483-76b7-4cdc-903e-b8b8b3a44808')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-40512483-76b7-4cdc-903e-b8b8b3a44808 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-40512483-76b7-4cdc-903e-b8b8b3a44808');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0d14a687-4566-49f9-9028-abee73cf0a17\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0d14a687-4566-49f9-9028-abee73cf0a17')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0d14a687-4566-49f9-9028-abee73cf0a17 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_a2ca591e-219e-469c-be35-bfe3d8f0f822\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_a2ca591e-219e-469c-be35-bfe3d8f0f822 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 731,\n  \"fields\": [\n    {\n      \"column\": \"date1\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-08-02 00:00:00\",\n        \"max\": \"2024-07-29 00:00:00\",\n        \"num_unique_values\": 731,\n        \"samples\": [\n          \"2024-01-22 00:00:00\",\n          \"2011-03-21 00:00:00\",\n          \"2016-05-02 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market_Cap\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9207095991.278816,\n        \"min\": 12933116989.432251,\n        \"max\": 77308708155.85547,\n        \"num_unique_values\": 649,\n        \"samples\": [\n          48429372832.86182,\n          37908572803.16748,\n          41934076630.85303\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date2\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-08-09 00:00:00\",\n        \"max\": \"2024-08-05 00:00:00\",\n        \"num_unique_values\": 731,\n        \"samples\": [\n          \"2024-01-29 00:00:00\",\n          \"2011-03-28 00:00:00\",\n          \"2016-05-09 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market_Cap_Date2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9204864599.137924,\n        \"min\": 12933116058.550781,\n        \"max\": 77308723049.95898,\n        \"num_unique_values\": 653,\n        \"samples\": [\n          25545009124.81714,\n          33702511482.08789,\n          32328705438.487793\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date3\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-08-16 00:00:00\",\n        \"max\": \"2024-08-12 00:00:00\",\n        \"num_unique_values\": 731,\n        \"samples\": [\n          \"2024-02-05 00:00:00\",\n          \"2011-04-04 00:00:00\",\n          \"2016-05-16 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market_Cap_Date3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11248382238.697176,\n        \"min\": 15498520199.511108,\n        \"max\": 92643625006.18066,\n        \"num_unique_values\": 638,\n        \"samples\": [\n          31760770930.28174,\n          36148115832.30176,\n          32488265969.450684\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":165}]},{"cell_type":"code","source":["# Calculating the growth rate for the relevant period\n","df['Growth Rate'] = ((df['Market_Cap_Date2'] - df['Market_Cap'])/ df['Market_Cap']) * 100\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"NgLZAeAnFTnP","executionInfo":{"status":"ok","timestamp":1724195877507,"user_tz":-60,"elapsed":14,"user":{"displayName":"Ameer Moutaouakil","userId":"06305495991749921211"}},"outputId":"48b55ca5-81f7-44e9-fe2f-2e7f068a1c3b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         date1    Market_Cap      date2  Market_Cap_Date2      date3  \\\n","0   2010-08-02  2.877159e+10 2010-08-09      2.853109e+10 2010-08-16   \n","1   2010-08-09  2.853109e+10 2010-08-16      2.621362e+10 2010-08-23   \n","2   2010-08-16  2.621363e+10 2010-08-23      2.538283e+10 2010-08-30   \n","3   2010-08-23  2.538283e+10 2010-08-30      2.481440e+10 2010-09-06   \n","4   2010-08-30  2.481440e+10 2010-09-06               NaN 2010-09-13   \n","..         ...           ...        ...               ...        ...   \n","726 2024-07-01  4.905603e+10 2024-07-08      4.990182e+10 2024-07-15   \n","727 2024-07-08  4.990182e+10 2024-07-15      5.470747e+10 2024-07-22   \n","728 2024-07-15  5.470747e+10 2024-07-22      5.428457e+10 2024-07-29   \n","729 2024-07-22  5.428457e+10 2024-07-29      4.232813e+10 2024-08-05   \n","730 2024-07-29  4.232813e+10 2024-08-05      3.733026e+10 2024-08-12   \n","\n","     Market_Cap_Date3  Growth Rate  \n","0        2.621362e+10    -0.835890  \n","1        2.538283e+10    -8.122614  \n","2        2.481440e+10    -3.169325  \n","3                 NaN    -2.239441  \n","4        2.621362e+10          NaN  \n","..                ...          ...  \n","726      5.555961e+10     1.724133  \n","727      5.513013e+10     9.630201  \n","728      4.298744e+10    -0.773013  \n","729      3.791172e+10   -22.025496  \n","730      3.849738e+10   -11.807442  \n","\n","[731 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-028ed1a6-c9a8-4ee1-985a-229d8ced677e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date1</th>\n","      <th>Market_Cap</th>\n","      <th>date2</th>\n","      <th>Market_Cap_Date2</th>\n","      <th>date3</th>\n","      <th>Market_Cap_Date3</th>\n","      <th>Growth Rate</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2010-08-02</td>\n","      <td>2.877159e+10</td>\n","      <td>2010-08-09</td>\n","      <td>2.853109e+10</td>\n","      <td>2010-08-16</td>\n","      <td>2.621362e+10</td>\n","      <td>-0.835890</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2010-08-09</td>\n","      <td>2.853109e+10</td>\n","      <td>2010-08-16</td>\n","      <td>2.621362e+10</td>\n","      <td>2010-08-23</td>\n","      <td>2.538283e+10</td>\n","      <td>-8.122614</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2010-08-16</td>\n","      <td>2.621363e+10</td>\n","      <td>2010-08-23</td>\n","      <td>2.538283e+10</td>\n","      <td>2010-08-30</td>\n","      <td>2.481440e+10</td>\n","      <td>-3.169325</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2010-08-23</td>\n","      <td>2.538283e+10</td>\n","      <td>2010-08-30</td>\n","      <td>2.481440e+10</td>\n","      <td>2010-09-06</td>\n","      <td>NaN</td>\n","      <td>-2.239441</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2010-08-30</td>\n","      <td>2.481440e+10</td>\n","      <td>2010-09-06</td>\n","      <td>NaN</td>\n","      <td>2010-09-13</td>\n","      <td>2.621362e+10</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>726</th>\n","      <td>2024-07-01</td>\n","      <td>4.905603e+10</td>\n","      <td>2024-07-08</td>\n","      <td>4.990182e+10</td>\n","      <td>2024-07-15</td>\n","      <td>5.555961e+10</td>\n","      <td>1.724133</td>\n","    </tr>\n","    <tr>\n","      <th>727</th>\n","      <td>2024-07-08</td>\n","      <td>4.990182e+10</td>\n","      <td>2024-07-15</td>\n","      <td>5.470747e+10</td>\n","      <td>2024-07-22</td>\n","      <td>5.513013e+10</td>\n","      <td>9.630201</td>\n","    </tr>\n","    <tr>\n","      <th>728</th>\n","      <td>2024-07-15</td>\n","      <td>5.470747e+10</td>\n","      <td>2024-07-22</td>\n","      <td>5.428457e+10</td>\n","      <td>2024-07-29</td>\n","      <td>4.298744e+10</td>\n","      <td>-0.773013</td>\n","    </tr>\n","    <tr>\n","      <th>729</th>\n","      <td>2024-07-22</td>\n","      <td>5.428457e+10</td>\n","      <td>2024-07-29</td>\n","      <td>4.232813e+10</td>\n","      <td>2024-08-05</td>\n","      <td>3.791172e+10</td>\n","      <td>-22.025496</td>\n","    </tr>\n","    <tr>\n","      <th>730</th>\n","      <td>2024-07-29</td>\n","      <td>4.232813e+10</td>\n","      <td>2024-08-05</td>\n","      <td>3.733026e+10</td>\n","      <td>2024-08-12</td>\n","      <td>3.849738e+10</td>\n","      <td>-11.807442</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>731 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-028ed1a6-c9a8-4ee1-985a-229d8ced677e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-028ed1a6-c9a8-4ee1-985a-229d8ced677e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-028ed1a6-c9a8-4ee1-985a-229d8ced677e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5a88e592-0e6c-45e6-87cd-82e9afabbc21\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5a88e592-0e6c-45e6-87cd-82e9afabbc21')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5a88e592-0e6c-45e6-87cd-82e9afabbc21 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_55f598e7-9a28-4817-8e35-a96cc19eb69a\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_55f598e7-9a28-4817-8e35-a96cc19eb69a button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 731,\n  \"fields\": [\n    {\n      \"column\": \"date1\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-08-02 00:00:00\",\n        \"max\": \"2024-07-29 00:00:00\",\n        \"num_unique_values\": 731,\n        \"samples\": [\n          \"2024-01-22 00:00:00\",\n          \"2011-03-21 00:00:00\",\n          \"2016-05-02 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market_Cap\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9207095991.278816,\n        \"min\": 12933116989.432251,\n        \"max\": 77308708155.85547,\n        \"num_unique_values\": 649,\n        \"samples\": [\n          48429372832.86182,\n          37908572803.16748,\n          41934076630.85303\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date2\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-08-09 00:00:00\",\n        \"max\": \"2024-08-05 00:00:00\",\n        \"num_unique_values\": 731,\n        \"samples\": [\n          \"2024-01-29 00:00:00\",\n          \"2011-03-28 00:00:00\",\n          \"2016-05-09 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market_Cap_Date2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9204864599.137924,\n        \"min\": 12933116058.550781,\n        \"max\": 77308723049.95898,\n        \"num_unique_values\": 653,\n        \"samples\": [\n          25545009124.81714,\n          33702511482.08789,\n          32328705438.487793\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date3\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-08-16 00:00:00\",\n        \"max\": \"2024-08-12 00:00:00\",\n        \"num_unique_values\": 731,\n        \"samples\": [\n          \"2024-02-05 00:00:00\",\n          \"2011-04-04 00:00:00\",\n          \"2016-05-16 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market_Cap_Date3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11248382238.697176,\n        \"min\": 15498520199.511108,\n        \"max\": 92643625006.18066,\n        \"num_unique_values\": 638,\n        \"samples\": [\n          31760770930.28174,\n          36148115832.30176,\n          32488265969.450684\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Growth Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.123469794803335,\n        \"min\": -22.025496047036487,\n        \"max\": 28.27940269434226,\n        \"num_unique_values\": 589,\n        \"samples\": [\n          3.700496474203632,\n          2.695403058511148,\n          -3.9253544234109006\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":166}]},{"cell_type":"code","source":["# Calculation the reaction weeks growth period\n","df['Reaction Growth Rate'] = ((df['Market_Cap_Date3'] - df['Market_Cap_Date2'])/ df['Market_Cap_Date2']) * 100\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"iM0SsK-DFrre","executionInfo":{"status":"ok","timestamp":1724195877507,"user_tz":-60,"elapsed":12,"user":{"displayName":"Ameer Moutaouakil","userId":"06305495991749921211"}},"outputId":"737da6d8-357d-4527-b436-6f90c16f58b5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         date1    Market_Cap      date2  Market_Cap_Date2      date3  \\\n","0   2010-08-02  2.877159e+10 2010-08-09      2.853109e+10 2010-08-16   \n","1   2010-08-09  2.853109e+10 2010-08-16      2.621362e+10 2010-08-23   \n","2   2010-08-16  2.621363e+10 2010-08-23      2.538283e+10 2010-08-30   \n","3   2010-08-23  2.538283e+10 2010-08-30      2.481440e+10 2010-09-06   \n","4   2010-08-30  2.481440e+10 2010-09-06               NaN 2010-09-13   \n","..         ...           ...        ...               ...        ...   \n","726 2024-07-01  4.905603e+10 2024-07-08      4.990182e+10 2024-07-15   \n","727 2024-07-08  4.990182e+10 2024-07-15      5.470747e+10 2024-07-22   \n","728 2024-07-15  5.470747e+10 2024-07-22      5.428457e+10 2024-07-29   \n","729 2024-07-22  5.428457e+10 2024-07-29      4.232813e+10 2024-08-05   \n","730 2024-07-29  4.232813e+10 2024-08-05      3.733026e+10 2024-08-12   \n","\n","     Market_Cap_Date3  Growth Rate  Reaction Growth Rate  \n","0        2.621362e+10    -0.835890             -8.122607  \n","1        2.538283e+10    -8.122614             -3.169304  \n","2        2.481440e+10    -3.169325             -2.239448  \n","3                 NaN    -2.239441                   NaN  \n","4        2.621362e+10          NaN                   NaN  \n","..                ...          ...                   ...  \n","726      5.555961e+10     1.724133             11.337834  \n","727      5.513013e+10     9.630201              0.772577  \n","728      4.298744e+10    -0.773013            -20.810939  \n","729      3.791172e+10   -22.025496            -10.433732  \n","730      3.849738e+10   -11.807442              3.126483  \n","\n","[731 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-4777cf09-70ff-4a85-b760-611579ed08a4\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date1</th>\n","      <th>Market_Cap</th>\n","      <th>date2</th>\n","      <th>Market_Cap_Date2</th>\n","      <th>date3</th>\n","      <th>Market_Cap_Date3</th>\n","      <th>Growth Rate</th>\n","      <th>Reaction Growth Rate</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2010-08-02</td>\n","      <td>2.877159e+10</td>\n","      <td>2010-08-09</td>\n","      <td>2.853109e+10</td>\n","      <td>2010-08-16</td>\n","      <td>2.621362e+10</td>\n","      <td>-0.835890</td>\n","      <td>-8.122607</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2010-08-09</td>\n","      <td>2.853109e+10</td>\n","      <td>2010-08-16</td>\n","      <td>2.621362e+10</td>\n","      <td>2010-08-23</td>\n","      <td>2.538283e+10</td>\n","      <td>-8.122614</td>\n","      <td>-3.169304</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2010-08-16</td>\n","      <td>2.621363e+10</td>\n","      <td>2010-08-23</td>\n","      <td>2.538283e+10</td>\n","      <td>2010-08-30</td>\n","      <td>2.481440e+10</td>\n","      <td>-3.169325</td>\n","      <td>-2.239448</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2010-08-23</td>\n","      <td>2.538283e+10</td>\n","      <td>2010-08-30</td>\n","      <td>2.481440e+10</td>\n","      <td>2010-09-06</td>\n","      <td>NaN</td>\n","      <td>-2.239441</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2010-08-30</td>\n","      <td>2.481440e+10</td>\n","      <td>2010-09-06</td>\n","      <td>NaN</td>\n","      <td>2010-09-13</td>\n","      <td>2.621362e+10</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>726</th>\n","      <td>2024-07-01</td>\n","      <td>4.905603e+10</td>\n","      <td>2024-07-08</td>\n","      <td>4.990182e+10</td>\n","      <td>2024-07-15</td>\n","      <td>5.555961e+10</td>\n","      <td>1.724133</td>\n","      <td>11.337834</td>\n","    </tr>\n","    <tr>\n","      <th>727</th>\n","      <td>2024-07-08</td>\n","      <td>4.990182e+10</td>\n","      <td>2024-07-15</td>\n","      <td>5.470747e+10</td>\n","      <td>2024-07-22</td>\n","      <td>5.513013e+10</td>\n","      <td>9.630201</td>\n","      <td>0.772577</td>\n","    </tr>\n","    <tr>\n","      <th>728</th>\n","      <td>2024-07-15</td>\n","      <td>5.470747e+10</td>\n","      <td>2024-07-22</td>\n","      <td>5.428457e+10</td>\n","      <td>2024-07-29</td>\n","      <td>4.298744e+10</td>\n","      <td>-0.773013</td>\n","      <td>-20.810939</td>\n","    </tr>\n","    <tr>\n","      <th>729</th>\n","      <td>2024-07-22</td>\n","      <td>5.428457e+10</td>\n","      <td>2024-07-29</td>\n","      <td>4.232813e+10</td>\n","      <td>2024-08-05</td>\n","      <td>3.791172e+10</td>\n","      <td>-22.025496</td>\n","      <td>-10.433732</td>\n","    </tr>\n","    <tr>\n","      <th>730</th>\n","      <td>2024-07-29</td>\n","      <td>4.232813e+10</td>\n","      <td>2024-08-05</td>\n","      <td>3.733026e+10</td>\n","      <td>2024-08-12</td>\n","      <td>3.849738e+10</td>\n","      <td>-11.807442</td>\n","      <td>3.126483</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>731 rows × 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4777cf09-70ff-4a85-b760-611579ed08a4')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4777cf09-70ff-4a85-b760-611579ed08a4 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4777cf09-70ff-4a85-b760-611579ed08a4');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2455e959-6756-4133-a2ff-de353677b11c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2455e959-6756-4133-a2ff-de353677b11c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2455e959-6756-4133-a2ff-de353677b11c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_42d9f6d7-6ea0-4b2d-b730-d81cafa19c74\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_42d9f6d7-6ea0-4b2d-b730-d81cafa19c74 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 731,\n  \"fields\": [\n    {\n      \"column\": \"date1\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-08-02 00:00:00\",\n        \"max\": \"2024-07-29 00:00:00\",\n        \"num_unique_values\": 731,\n        \"samples\": [\n          \"2024-01-22 00:00:00\",\n          \"2011-03-21 00:00:00\",\n          \"2016-05-02 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market_Cap\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9207095991.278816,\n        \"min\": 12933116989.432251,\n        \"max\": 77308708155.85547,\n        \"num_unique_values\": 649,\n        \"samples\": [\n          48429372832.86182,\n          37908572803.16748,\n          41934076630.85303\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date2\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-08-09 00:00:00\",\n        \"max\": \"2024-08-05 00:00:00\",\n        \"num_unique_values\": 731,\n        \"samples\": [\n          \"2024-01-29 00:00:00\",\n          \"2011-03-28 00:00:00\",\n          \"2016-05-09 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market_Cap_Date2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9204864599.137924,\n        \"min\": 12933116058.550781,\n        \"max\": 77308723049.95898,\n        \"num_unique_values\": 653,\n        \"samples\": [\n          25545009124.81714,\n          33702511482.08789,\n          32328705438.487793\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date3\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-08-16 00:00:00\",\n        \"max\": \"2024-08-12 00:00:00\",\n        \"num_unique_values\": 731,\n        \"samples\": [\n          \"2024-02-05 00:00:00\",\n          \"2011-04-04 00:00:00\",\n          \"2016-05-16 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market_Cap_Date3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11248382238.697176,\n        \"min\": 15498520199.511108,\n        \"max\": 92643625006.18066,\n        \"num_unique_values\": 638,\n        \"samples\": [\n          31760770930.28174,\n          36148115832.30176,\n          32488265969.450684\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Growth Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.123469794803335,\n        \"min\": -22.025496047036487,\n        \"max\": 28.27940269434226,\n        \"num_unique_values\": 589,\n        \"samples\": [\n          3.700496474203632,\n          2.695403058511148,\n          -3.9253544234109006\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Reaction Growth Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.603644038425566,\n        \"min\": -20.810938671327676,\n        \"max\": 53.724806062426836,\n        \"num_unique_values\": 590,\n        \"samples\": [\n          14.809387976111395,\n          -0.08749140768515663,\n          12.756463015653027\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":167}]},{"cell_type":"code","source":["# Drop rows with any NaN values\n","df_cleaned = df.dropna()\n","\n","# Display the cleaned DataFrame\n","print(df_cleaned)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0p_she_u45uS","executionInfo":{"status":"ok","timestamp":1724195877507,"user_tz":-60,"elapsed":11,"user":{"displayName":"Ameer Moutaouakil","userId":"06305495991749921211"}},"outputId":"f4740044-ed71-4777-a8c3-6632b0abef7f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["         date1    Market_Cap      date2  Market_Cap_Date2      date3  \\\n","0   2010-08-02  2.877159e+10 2010-08-09      2.853109e+10 2010-08-16   \n","1   2010-08-09  2.853109e+10 2010-08-16      2.621362e+10 2010-08-23   \n","2   2010-08-16  2.621363e+10 2010-08-23      2.538283e+10 2010-08-30   \n","6   2010-09-13  2.621363e+10 2010-09-20      2.748167e+10 2010-09-27   \n","7   2010-09-20  2.748167e+10 2010-09-27      2.728490e+10 2010-10-04   \n","..         ...           ...        ...               ...        ...   \n","726 2024-07-01  4.905603e+10 2024-07-08      4.990182e+10 2024-07-15   \n","727 2024-07-08  4.990182e+10 2024-07-15      5.470747e+10 2024-07-22   \n","728 2024-07-15  5.470747e+10 2024-07-22      5.428457e+10 2024-07-29   \n","729 2024-07-22  5.428457e+10 2024-07-29      4.232813e+10 2024-08-05   \n","730 2024-07-29  4.232813e+10 2024-08-05      3.733026e+10 2024-08-12   \n","\n","     Market_Cap_Date3  Growth Rate  Reaction Growth Rate  \n","0        2.621362e+10    -0.835890             -8.122607  \n","1        2.538283e+10    -8.122614             -3.169304  \n","2        2.481440e+10    -3.169325             -2.239448  \n","6        2.728491e+10     4.837321             -0.715970  \n","7        2.807196e+10    -0.715990              2.884593  \n","..                ...          ...                   ...  \n","726      5.555961e+10     1.724133             11.337834  \n","727      5.513013e+10     9.630201              0.772577  \n","728      4.298744e+10    -0.773013            -20.810939  \n","729      3.791172e+10   -22.025496            -10.433732  \n","730      3.849738e+10   -11.807442              3.126483  \n","\n","[528 rows x 8 columns]\n"]}]},{"cell_type":"code","source":["# Getting the average reaction\n","df_cleaned['Reaction Growth Rate Indicator'] = df_cleaned['Reaction Growth Rate'].apply(lambda x: 1 if x > 0 else 0)\n","df_cleaned"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":531},"id":"nzhgVmr86HW4","executionInfo":{"status":"ok","timestamp":1724195877507,"user_tz":-60,"elapsed":9,"user":{"displayName":"Ameer Moutaouakil","userId":"06305495991749921211"}},"outputId":"5e0ad303-c9e6-480d-c144-88068d9fd932"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-169-8cf9657ef64d>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_cleaned['Reaction Growth Rate Indicator'] = df_cleaned['Reaction Growth Rate'].apply(lambda x: 1 if x > 0 else 0)\n"]},{"output_type":"execute_result","data":{"text/plain":["         date1    Market_Cap      date2  Market_Cap_Date2      date3  \\\n","0   2010-08-02  2.877159e+10 2010-08-09      2.853109e+10 2010-08-16   \n","1   2010-08-09  2.853109e+10 2010-08-16      2.621362e+10 2010-08-23   \n","2   2010-08-16  2.621363e+10 2010-08-23      2.538283e+10 2010-08-30   \n","6   2010-09-13  2.621363e+10 2010-09-20      2.748167e+10 2010-09-27   \n","7   2010-09-20  2.748167e+10 2010-09-27      2.728490e+10 2010-10-04   \n","..         ...           ...        ...               ...        ...   \n","726 2024-07-01  4.905603e+10 2024-07-08      4.990182e+10 2024-07-15   \n","727 2024-07-08  4.990182e+10 2024-07-15      5.470747e+10 2024-07-22   \n","728 2024-07-15  5.470747e+10 2024-07-22      5.428457e+10 2024-07-29   \n","729 2024-07-22  5.428457e+10 2024-07-29      4.232813e+10 2024-08-05   \n","730 2024-07-29  4.232813e+10 2024-08-05      3.733026e+10 2024-08-12   \n","\n","     Market_Cap_Date3  Growth Rate  Reaction Growth Rate  \\\n","0        2.621362e+10    -0.835890             -8.122607   \n","1        2.538283e+10    -8.122614             -3.169304   \n","2        2.481440e+10    -3.169325             -2.239448   \n","6        2.728491e+10     4.837321             -0.715970   \n","7        2.807196e+10    -0.715990              2.884593   \n","..                ...          ...                   ...   \n","726      5.555961e+10     1.724133             11.337834   \n","727      5.513013e+10     9.630201              0.772577   \n","728      4.298744e+10    -0.773013            -20.810939   \n","729      3.791172e+10   -22.025496            -10.433732   \n","730      3.849738e+10   -11.807442              3.126483   \n","\n","     Reaction Growth Rate Indicator  \n","0                                 0  \n","1                                 0  \n","2                                 0  \n","6                                 0  \n","7                                 1  \n","..                              ...  \n","726                               1  \n","727                               1  \n","728                               0  \n","729                               0  \n","730                               1  \n","\n","[528 rows x 9 columns]"],"text/html":["\n","  <div id=\"df-8876aa6a-dd51-40d9-bf0e-aea50fde1a31\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date1</th>\n","      <th>Market_Cap</th>\n","      <th>date2</th>\n","      <th>Market_Cap_Date2</th>\n","      <th>date3</th>\n","      <th>Market_Cap_Date3</th>\n","      <th>Growth Rate</th>\n","      <th>Reaction Growth Rate</th>\n","      <th>Reaction Growth Rate Indicator</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2010-08-02</td>\n","      <td>2.877159e+10</td>\n","      <td>2010-08-09</td>\n","      <td>2.853109e+10</td>\n","      <td>2010-08-16</td>\n","      <td>2.621362e+10</td>\n","      <td>-0.835890</td>\n","      <td>-8.122607</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2010-08-09</td>\n","      <td>2.853109e+10</td>\n","      <td>2010-08-16</td>\n","      <td>2.621362e+10</td>\n","      <td>2010-08-23</td>\n","      <td>2.538283e+10</td>\n","      <td>-8.122614</td>\n","      <td>-3.169304</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2010-08-16</td>\n","      <td>2.621363e+10</td>\n","      <td>2010-08-23</td>\n","      <td>2.538283e+10</td>\n","      <td>2010-08-30</td>\n","      <td>2.481440e+10</td>\n","      <td>-3.169325</td>\n","      <td>-2.239448</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>2010-09-13</td>\n","      <td>2.621363e+10</td>\n","      <td>2010-09-20</td>\n","      <td>2.748167e+10</td>\n","      <td>2010-09-27</td>\n","      <td>2.728491e+10</td>\n","      <td>4.837321</td>\n","      <td>-0.715970</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>2010-09-20</td>\n","      <td>2.748167e+10</td>\n","      <td>2010-09-27</td>\n","      <td>2.728490e+10</td>\n","      <td>2010-10-04</td>\n","      <td>2.807196e+10</td>\n","      <td>-0.715990</td>\n","      <td>2.884593</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>726</th>\n","      <td>2024-07-01</td>\n","      <td>4.905603e+10</td>\n","      <td>2024-07-08</td>\n","      <td>4.990182e+10</td>\n","      <td>2024-07-15</td>\n","      <td>5.555961e+10</td>\n","      <td>1.724133</td>\n","      <td>11.337834</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>727</th>\n","      <td>2024-07-08</td>\n","      <td>4.990182e+10</td>\n","      <td>2024-07-15</td>\n","      <td>5.470747e+10</td>\n","      <td>2024-07-22</td>\n","      <td>5.513013e+10</td>\n","      <td>9.630201</td>\n","      <td>0.772577</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>728</th>\n","      <td>2024-07-15</td>\n","      <td>5.470747e+10</td>\n","      <td>2024-07-22</td>\n","      <td>5.428457e+10</td>\n","      <td>2024-07-29</td>\n","      <td>4.298744e+10</td>\n","      <td>-0.773013</td>\n","      <td>-20.810939</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>729</th>\n","      <td>2024-07-22</td>\n","      <td>5.428457e+10</td>\n","      <td>2024-07-29</td>\n","      <td>4.232813e+10</td>\n","      <td>2024-08-05</td>\n","      <td>3.791172e+10</td>\n","      <td>-22.025496</td>\n","      <td>-10.433732</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>730</th>\n","      <td>2024-07-29</td>\n","      <td>4.232813e+10</td>\n","      <td>2024-08-05</td>\n","      <td>3.733026e+10</td>\n","      <td>2024-08-12</td>\n","      <td>3.849738e+10</td>\n","      <td>-11.807442</td>\n","      <td>3.126483</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>528 rows × 9 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8876aa6a-dd51-40d9-bf0e-aea50fde1a31')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8876aa6a-dd51-40d9-bf0e-aea50fde1a31 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8876aa6a-dd51-40d9-bf0e-aea50fde1a31');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1a3e1e4e-260e-4820-bc65-de6754151276\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1a3e1e4e-260e-4820-bc65-de6754151276')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1a3e1e4e-260e-4820-bc65-de6754151276 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_d980cbbc-a95c-4de2-b1c2-f166638a96dc\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_cleaned')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_d980cbbc-a95c-4de2-b1c2-f166638a96dc button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_cleaned');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_cleaned","summary":"{\n  \"name\": \"df_cleaned\",\n  \"rows\": 528,\n  \"fields\": [\n    {\n      \"column\": \"date1\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-08-02 00:00:00\",\n        \"max\": \"2024-07-29 00:00:00\",\n        \"num_unique_values\": 528,\n        \"samples\": [\n          \"2014-10-06 00:00:00\",\n          \"2020-11-09 00:00:00\",\n          \"2010-10-04 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market_Cap\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9165006085.779202,\n        \"min\": 12933116989.432251,\n        \"max\": 67422270336.046875,\n        \"num_unique_values\": 523,\n        \"samples\": [\n          54284572595.13135,\n          24737404288.126465,\n          28071976239.010986\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date2\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-08-09 00:00:00\",\n        \"max\": \"2024-08-05 00:00:00\",\n        \"num_unique_values\": 528,\n        \"samples\": [\n          \"2014-10-13 00:00:00\",\n          \"2020-11-16 00:00:00\",\n          \"2010-10-11 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market_Cap_Date2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9170996568.193089,\n        \"min\": 12933116058.550781,\n        \"max\": 70566475164.60938,\n        \"num_unique_values\": 524,\n        \"samples\": [\n          25010035267.691162,\n          52032189449.82568,\n          30127083259.72632\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date3\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-08-16 00:00:00\",\n        \"max\": \"2024-08-12 00:00:00\",\n        \"num_unique_values\": 528,\n        \"samples\": [\n          \"2014-10-20 00:00:00\",\n          \"2020-11-23 00:00:00\",\n          \"2010-10-18 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market_Cap_Date3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11263682539.83126,\n        \"min\": 15498520199.511108,\n        \"max\": 92643625006.18066,\n        \"num_unique_values\": 514,\n        \"samples\": [\n          34364855988.95361,\n          47555591632.48828,\n          59307832417.32861\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Growth Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.094989539073727,\n        \"min\": -22.025496047036487,\n        \"max\": 28.27940269434226,\n        \"num_unique_values\": 527,\n        \"samples\": [\n          10.34480525401933,\n          -3.9850535511115197,\n          7.320849103097332\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Reaction Growth Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.558218429821103,\n        \"min\": -20.810938671327676,\n        \"max\": 50.31789176564886,\n        \"num_unique_values\": 528,\n        \"samples\": [\n          4.652874502608396,\n          20.652987670352534,\n          0.7257005445365007\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Reaction Growth Rate Indicator\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":169}]},{"cell_type":"code","source":["# Calculate the average of the 'Reaction Growth Rate Indicator' column to get the percentage of positive weeks\n","average_indicator = df_cleaned['Reaction Growth Rate Indicator'].mean()\n","\n","print(f\"Average of 'Reaction Growth Rate Indicator': {average_indicator}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ftmLfOqA68Cn","executionInfo":{"status":"ok","timestamp":1724195877507,"user_tz":-60,"elapsed":7,"user":{"displayName":"Ameer Moutaouakil","userId":"06305495991749921211"}},"outputId":"ce8a5099-ec3d-4c11-c9e3-ffa3516712d4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Average of 'Reaction Growth Rate Indicator': 0.6988636363636364\n"]}]},{"cell_type":"code","source":["# Creating new dataframes for each category\n","\n","veryneg = df_cleaned[df_cleaned['Growth Rate'] < -5]\n","\n","neg1 = df_cleaned[df_cleaned['Growth Rate'] < -1]\n","neg = neg1[neg1['Growth Rate'] > -5]\n","\n","neutral1 = df_cleaned[df_cleaned['Growth Rate'] > -1]\n","neutral = neutral1[neutral1['Growth Rate'] < 1]\n","\n","pos1 = df_cleaned[df_cleaned['Growth Rate'] < 5]\n","pos = pos1[pos1['Growth Rate'] > 1]\n","\n","verypos = df_cleaned[df_cleaned['Growth Rate'] > 5]\n","\n","neutral"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"BI8ymsJCFxyk","executionInfo":{"status":"ok","timestamp":1724195877912,"user_tz":-60,"elapsed":412,"user":{"displayName":"Ameer Moutaouakil","userId":"06305495991749921211"}},"outputId":"0912900b-c929-4247-a994-6d94d4eb86fd"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         date1    Market_Cap      date2  Market_Cap_Date2      date3  \\\n","0   2010-08-02  2.877159e+10 2010-08-09      2.853109e+10 2010-08-16   \n","7   2010-09-20  2.748167e+10 2010-09-27      2.728490e+10 2010-10-04   \n","10  2010-10-11  3.012709e+10 2010-10-18      3.034571e+10 2010-10-25   \n","12  2010-10-25  3.093600e+10 2010-11-01      3.111092e+10 2010-11-08   \n","16  2010-11-22  3.541791e+10 2010-11-29      3.511183e+10 2010-12-06   \n","..         ...           ...        ...               ...        ...   \n","704 2024-01-29  4.271865e+10 2024-02-05      4.286659e+10 2024-02-12   \n","710 2024-03-11  4.599841e+10 2024-03-18      4.626430e+10 2024-03-25   \n","713 2024-04-01  5.048050e+10 2024-04-08      5.093631e+10 2024-04-15   \n","718 2024-05-06  4.747978e+10 2024-05-13      4.740289e+10 2024-05-20   \n","728 2024-07-15  5.470747e+10 2024-07-22      5.428457e+10 2024-07-29   \n","\n","     Market_Cap_Date3  Growth Rate  Reaction Growth Rate  \\\n","0        2.621362e+10    -0.835890             -8.122607   \n","7        2.807196e+10    -0.715990              2.884593   \n","10       3.093601e+10     0.725663              1.945262   \n","12       3.587702e+10     0.565402             15.319722   \n","16       3.640174e+10    -0.864220              3.673723   \n","..                ...          ...                   ...   \n","704      5.067911e+10     0.346311             18.225206   \n","710      5.036676e+10     0.578033              8.867447   \n","713      4.775081e+10     0.902939             -6.253886   \n","718      4.743846e+10    -0.161936              0.075032   \n","728      4.298744e+10    -0.773013            -20.810939   \n","\n","     Reaction Growth Rate Indicator  \n","0                                 0  \n","7                                 1  \n","10                                1  \n","12                                1  \n","16                                1  \n","..                              ...  \n","704                               1  \n","710                               1  \n","713                               0  \n","718                               1  \n","728                               0  \n","\n","[131 rows x 9 columns]"],"text/html":["\n","  <div id=\"df-43520861-f34b-4179-8890-b2ed8bd73ca7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date1</th>\n","      <th>Market_Cap</th>\n","      <th>date2</th>\n","      <th>Market_Cap_Date2</th>\n","      <th>date3</th>\n","      <th>Market_Cap_Date3</th>\n","      <th>Growth Rate</th>\n","      <th>Reaction Growth Rate</th>\n","      <th>Reaction Growth Rate Indicator</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2010-08-02</td>\n","      <td>2.877159e+10</td>\n","      <td>2010-08-09</td>\n","      <td>2.853109e+10</td>\n","      <td>2010-08-16</td>\n","      <td>2.621362e+10</td>\n","      <td>-0.835890</td>\n","      <td>-8.122607</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>2010-09-20</td>\n","      <td>2.748167e+10</td>\n","      <td>2010-09-27</td>\n","      <td>2.728490e+10</td>\n","      <td>2010-10-04</td>\n","      <td>2.807196e+10</td>\n","      <td>-0.715990</td>\n","      <td>2.884593</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>2010-10-11</td>\n","      <td>3.012709e+10</td>\n","      <td>2010-10-18</td>\n","      <td>3.034571e+10</td>\n","      <td>2010-10-25</td>\n","      <td>3.093601e+10</td>\n","      <td>0.725663</td>\n","      <td>1.945262</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>2010-10-25</td>\n","      <td>3.093600e+10</td>\n","      <td>2010-11-01</td>\n","      <td>3.111092e+10</td>\n","      <td>2010-11-08</td>\n","      <td>3.587702e+10</td>\n","      <td>0.565402</td>\n","      <td>15.319722</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>2010-11-22</td>\n","      <td>3.541791e+10</td>\n","      <td>2010-11-29</td>\n","      <td>3.511183e+10</td>\n","      <td>2010-12-06</td>\n","      <td>3.640174e+10</td>\n","      <td>-0.864220</td>\n","      <td>3.673723</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>704</th>\n","      <td>2024-01-29</td>\n","      <td>4.271865e+10</td>\n","      <td>2024-02-05</td>\n","      <td>4.286659e+10</td>\n","      <td>2024-02-12</td>\n","      <td>5.067911e+10</td>\n","      <td>0.346311</td>\n","      <td>18.225206</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>710</th>\n","      <td>2024-03-11</td>\n","      <td>4.599841e+10</td>\n","      <td>2024-03-18</td>\n","      <td>4.626430e+10</td>\n","      <td>2024-03-25</td>\n","      <td>5.036676e+10</td>\n","      <td>0.578033</td>\n","      <td>8.867447</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>713</th>\n","      <td>2024-04-01</td>\n","      <td>5.048050e+10</td>\n","      <td>2024-04-08</td>\n","      <td>5.093631e+10</td>\n","      <td>2024-04-15</td>\n","      <td>4.775081e+10</td>\n","      <td>0.902939</td>\n","      <td>-6.253886</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>718</th>\n","      <td>2024-05-06</td>\n","      <td>4.747978e+10</td>\n","      <td>2024-05-13</td>\n","      <td>4.740289e+10</td>\n","      <td>2024-05-20</td>\n","      <td>4.743846e+10</td>\n","      <td>-0.161936</td>\n","      <td>0.075032</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>728</th>\n","      <td>2024-07-15</td>\n","      <td>5.470747e+10</td>\n","      <td>2024-07-22</td>\n","      <td>5.428457e+10</td>\n","      <td>2024-07-29</td>\n","      <td>4.298744e+10</td>\n","      <td>-0.773013</td>\n","      <td>-20.810939</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>131 rows × 9 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-43520861-f34b-4179-8890-b2ed8bd73ca7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-43520861-f34b-4179-8890-b2ed8bd73ca7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-43520861-f34b-4179-8890-b2ed8bd73ca7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e755418d-ec19-4980-b829-df0e8db3555e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e755418d-ec19-4980-b829-df0e8db3555e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e755418d-ec19-4980-b829-df0e8db3555e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_c025fe1c-118f-4b8c-952e-363830137e2b\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('neutral')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_c025fe1c-118f-4b8c-952e-363830137e2b button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('neutral');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"neutral","summary":"{\n  \"name\": \"neutral\",\n  \"rows\": 131,\n  \"fields\": [\n    {\n      \"column\": \"date1\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-08-02 00:00:00\",\n        \"max\": \"2024-07-15 00:00:00\",\n        \"num_unique_values\": 131,\n        \"samples\": [\n          \"2015-06-22 00:00:00\",\n          \"2014-07-14 00:00:00\",\n          \"2013-04-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market_Cap\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7417246864.999518,\n        \"min\": 20214094838.638184,\n        \"max\": 66093269479.34766,\n        \"num_unique_values\": 131,\n        \"samples\": [\n          36412839904.6626,\n          40762108031.04492,\n          28941328305.351562\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date2\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-08-09 00:00:00\",\n        \"max\": \"2024-07-22 00:00:00\",\n        \"num_unique_values\": 131,\n        \"samples\": [\n          \"2015-06-29 00:00:00\",\n          \"2014-07-21 00:00:00\",\n          \"2013-04-08 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market_Cap_Date2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7428981190.333891,\n        \"min\": 20059786340.92749,\n        \"max\": 66139850788.09277,\n        \"num_unique_values\": 131,\n        \"samples\": [\n          36148104661.72412,\n          41110503453.430664,\n          28672109937.254883\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date3\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2010-08-16 00:00:00\",\n        \"max\": \"2024-07-29 00:00:00\",\n        \"num_unique_values\": 131,\n        \"samples\": [\n          \"2015-07-06 00:00:00\",\n          \"2014-07-28 00:00:00\",\n          \"2013-04-15 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market_Cap_Date3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7836159477.469028,\n        \"min\": 20059786340.92749,\n        \"max\": 69849711327.02344,\n        \"num_unique_values\": 130,\n        \"samples\": [\n          35594576475.143555,\n          40971150497.4126,\n          29053514416.55713\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Growth Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5700459593521076,\n        \"min\": -0.9950085065634587,\n        \"max\": 0.9819954942299,\n        \"num_unique_values\": 130,\n        \"samples\": [\n          -0.7270381646463606,\n          0.8547041338499961,\n          -0.9302211883858085\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Reaction Growth Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.951546010148876,\n        \"min\": -20.810938671327676,\n        \"max\": 27.601662057387692,\n        \"num_unique_values\": 131,\n        \"samples\": [\n          -1.531278587800142,\n          -0.338971660067173,\n          1.3302281559916564\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Reaction Growth Rate Indicator\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":171}]},{"cell_type":"code","source":["# Get the number of rows in the DataFrame\n","row_count_veryneg = len(veryneg)\n","row_count_neg = len(neg)\n","row_count_neutral = len(neutral)\n","row_count_pos = len(pos)\n","row_count_verypos = len(verypos)\n","\n","\n","print(f\"Number of rows: {row_count_veryneg}\")\n","print(f\"Number of rows: {row_count_neg}\")\n","print(f\"Number of rows: {row_count_neutral}\")\n","print(f\"Number of rows: {row_count_pos}\")\n","print(f\"Number of rows: {row_count_verypos}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K5JqDD_h4qs4","executionInfo":{"status":"ok","timestamp":1724195877912,"user_tz":-60,"elapsed":10,"user":{"displayName":"Ameer Moutaouakil","userId":"06305495991749921211"}},"outputId":"f3562b3b-aaac-4245-e100-ca4855015b10"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of rows: 57\n","Number of rows: 144\n","Number of rows: 131\n","Number of rows: 143\n","Number of rows: 53\n"]}]},{"cell_type":"code","source":["# getting the expected counts\n","ECveryneg = average_indicator * row_count_veryneg\n","ECneg = average_indicator * row_count_neg\n","ECneutral = average_indicator * row_count_neutral\n","ECpos = average_indicator * row_count_pos\n","ECverypos = average_indicator * row_count_verypos\n","\n","print(f\"The positive expected counts of the veryneg sample is : {ECveryneg}\")\n","print(f\"The positive expected counts of the neg sample is : {ECneg}\")\n","print(f\"The positive expected counts of the neutral sample is : {ECneutral}\")\n","print(f\"The positive expected counts of the pos sample is : {ECpos}\")\n","print(f\"The positive expected counts of the verypos sample is : {ECverypos}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EJxItpQ49MsY","executionInfo":{"status":"ok","timestamp":1724195877912,"user_tz":-60,"elapsed":9,"user":{"displayName":"Ameer Moutaouakil","userId":"06305495991749921211"}},"outputId":"40bde3d0-22e4-4f79-aabf-f4e654f18596"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The positive expected counts of the veryneg sample is : 39.83522727272727\n","The positive expected counts of the neg sample is : 100.63636363636364\n","The positive expected counts of the neutral sample is : 91.55113636363636\n","The positive expected counts of the pos sample is : 99.9375\n","The positive expected counts of the verypos sample is : 37.03977272727273\n"]}]},{"cell_type":"code","source":["# getting the observed counts\n","count_ones1 = veryneg['Reaction Growth Rate Indicator'].sum()\n","\n","print(f\"Number of rows with '1': {count_ones1}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xQ3vLyX5_MG9","executionInfo":{"status":"ok","timestamp":1724195877912,"user_tz":-60,"elapsed":8,"user":{"displayName":"Ameer Moutaouakil","userId":"06305495991749921211"}},"outputId":"7ab14ea6-7a08-4a0c-ecf2-cbd9654eb043"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of rows with '1': 45\n"]}]},{"cell_type":"code","source":["count_ones2 = neg['Reaction Growth Rate Indicator'].sum()\n","\n","print(f\"Number of rows with '1': {count_ones2}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6yzb77Ay_aYU","executionInfo":{"status":"ok","timestamp":1724195877912,"user_tz":-60,"elapsed":7,"user":{"displayName":"Ameer Moutaouakil","userId":"06305495991749921211"}},"outputId":"ca630ade-03f4-4659-a729-004a4d9e5784"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of rows with '1': 98\n"]}]},{"cell_type":"code","source":["count_ones3 = neutral['Reaction Growth Rate Indicator'].sum()\n","\n","print(f\"Number of rows with '1': {count_ones3}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6hKkZsZ-_a0y","executionInfo":{"status":"ok","timestamp":1724195877912,"user_tz":-60,"elapsed":6,"user":{"displayName":"Ameer Moutaouakil","userId":"06305495991749921211"}},"outputId":"d4bb7c97-0e7f-4310-a873-c5333389c171"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of rows with '1': 87\n"]}]},{"cell_type":"code","source":["count_ones4 = pos['Reaction Growth Rate Indicator'].sum()\n","\n","print(f\"Number of rows with '1': {count_ones4}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cVLf2HBL_bFT","executionInfo":{"status":"ok","timestamp":1724195877912,"user_tz":-60,"elapsed":5,"user":{"displayName":"Ameer Moutaouakil","userId":"06305495991749921211"}},"outputId":"4484f076-7906-49e9-e321-bdea93c2fff7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of rows with '1': 93\n"]}]},{"cell_type":"code","source":["count_ones5 = verypos['Reaction Growth Rate Indicator'].sum()\n","\n","print(f\"Number of rows with '1': {count_ones5}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sLGELLBv_bms","executionInfo":{"status":"ok","timestamp":1724195877913,"user_tz":-60,"elapsed":5,"user":{"displayName":"Ameer Moutaouakil","userId":"06305495991749921211"}},"outputId":"f375a16b-8d61-4ff3-8c91-42d0222f1b8c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of rows with '1': 46\n"]}]}]}